# -*- coding: utf-8 -*-
"""IR-ass3-part1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xCmVIOARr_40_PpaoWS8wRVCLq7wAre-
"""

#print("Hello world")

#with open("/content/drive/MyDrive/DL_assignment/IR_ass/wiki-Vote.txt.gz") as file:

import gzip
f=gzip.open('wiki-Vote.txt.gz','rb')
file_content=f.read()
file_content = str(file_content).split("\\r\\n")
file_content = file_content[4:]

edge_list = []
neighbour_list = {}
u_node = []
v_node = []
for edge in file_content[:-1]:
  spl = edge.split("\\t")
  #print(spl)
  e1, e2 = int(spl[0]), int(spl[1])
  u_node.append(e1)
  v_node.append(e2)
  edge_list.append((e1,e2))
  if e1 in neighbour_list.keys():
    neighbour_list[e1].add(e2)
  else:
    neighbour_list[e1] = {e2}
  if e2 in neighbour_list.keys():
    neighbour_list[e2].add(e1)
  else:
    neighbour_list[e2] = {e1}

set_of_nodes = set([int(x) for e in edge_list for x in e])

print("No of nodes:", len(set_of_nodes))
print("No of edges:", len(edge_list))

max_mat_size = max(set_of_nodes)

adj_list = [[0 for _ in range(max_mat_size+1)] for _ in range(max_mat_size+1)]

for e in edge_list:
  adj_list[e[0]][e[1]] = 1

import numpy as np

no_of_out_nodes = len(set(v_node))
no_of_in_nodes = len(set(u_node))

avg_in_deg = sum([sum(x) for x in np.array(adj_list).T])/no_of_in_nodes
avg_out_deg = sum([sum(x) for x in adj_list])/no_of_out_nodes

print("Average in-degree:", avg_in_deg)
print("Average out-degree:", avg_out_deg)

node_with_max_in_deg = 0
node_with_max_out_deg = 0
max_out_deg = 0
max_in_deg = 0
in_deg_list = []
out_deg_list = []

np_adj_list = np.array(adj_list)

for i in range(len(adj_list)):
  in_deg = sum(np_adj_list[:,i])
  out_deg = sum(np_adj_list[i])
  in_deg_list.append(in_deg)
  out_deg_list.append(out_deg)
  if max_in_deg < in_deg:
    max_in_deg = in_deg
    node_with_max_in_deg = i
  if max_out_deg < out_deg:
    max_out_deg = out_deg
    node_with_max_out_deg = i

density_max = max_mat_size*(max_mat_size-1)
density_net = len(edge_list)

print("Density of network:", density_net/density_max*100)

import matplotlib.pyplot as plt

in_deg_frac = []
for i in range(1, max_in_deg):
  in_deg_frac.append(in_deg_list.count(i)/max_mat_size)

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])

x = [i for i in range(1, max_in_deg)]
ax.bar(x, in_deg_frac)
ax.set_title("In degree distribution")
ax.set_xlabel("Number of degress")
ax.set_ylabel("Fraction to total nodes")
#ax.set_yticks(np.arange(0, 0.1, 0.01))
plt.savefig("in_deg_dist.jpg")
plt.show()

out_deg_frac = []
for i in range(1, max_out_deg):
  out_deg_frac.append(out_deg_list.count(i)/max_mat_size)

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])

#fig = plt.figure(figsize = (10, 5))
 
x = [i for i in range(1, max_out_deg)]
ax.bar(x, out_deg_frac)
ax.set_title("Out degree distribution")
ax.set_xlabel("Number of degress")
ax.set_ylabel("Fraction to total nodes")
ax.set_yticks(np.arange(0, 0.3, 0.05))
plt.savefig("out_deg_dist.jpg")
plt.show()

"""#Local Clustering Coefficient"""

'''
np_adj_list = np.array(adj_list)
centrality = []

for i in range(max_mat_size):
  k = in_deg_list[i] + out_deg_list[i]
  if k == 0:
    centrality.append(0)
    continue
  neigh_list = neighbour_list[i]
  numer = 0
  for m in neighbour_list:
    for n in neighbour_list:
      numer += np_adj_list[m][n] + np_adj_list[i][m] + np_adj_list[n][i]
  centrality.append(numer/(k*(k-1)))

with open("centrality.txt", "wb") as file:
    for key in centrality.keys():
        file.write(centrality[key])
'''      


"""#Degree centrality"""

in_deg_dict = dict()
out_deg_dict = dict()

for i in range(max_mat_size):
  if in_deg_list[i] != 0:
    in_deg_dict[i+1] = in_deg_list[i]/max_in_deg
  if out_deg_list[i] != 0:
    out_deg_dict[i+1] = out_deg_list[i]/max_out_deg
    
#print("In-Degree Centrality:", in_deg_dict)
#print("Out-Degree Centrality:", out_deg_dict)